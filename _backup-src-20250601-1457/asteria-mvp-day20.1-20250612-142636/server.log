
> asteria-mvp@1.0.0-mvp dev
> next dev

   ▲ Next.js 15.3.3
   - Local:        http://localhost:3000
   - Network:      http://192.168.0.219:3000
   - Environments: .env.local

 ✓ Starting...
 ✓ Ready in 1182ms
 ○ Compiling /api/chat ...
 ✓ Compiled /api/chat in 2.4s (2927 modules)
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [WORKFLOW_SYSTEM] Initializing global workflow engine...
   ├─ Max concurrent workflows: 10
   ├─ Parallel execution: enabled
   ├─ Auto retry: enabled
   └─ Status: ✅ OPERATIONAL

🚨 DIAGNOSTIC [ulqp9a] ================================
🚨 CHAT API CALLED: 2025-06-09T00:50:58.097Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [ulqp9a] Request Body:
   ├─ Message: "I need a private jet to Paris tomorrow"
   ├─ Session ID: test123
   ├─ History Length: 0
   └─ Full Body Keys: message, conversationHistory, sessionId, memberProfile
👤 Guest user: Test User
🚨 DIAGNOSTIC [ulqp9a] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "I need a private jet to Paris tomorrow..."
🚨 DIAGNOSTIC [ulqp9a] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [ulqp9a] Agent loop created successfully
🚨 DIAGNOSTIC [ulqp9a] Creating direct agent context...
🚨 DIAGNOSTIC [ulqp9a] Direct context created: {
  memberId: 'test',
  memberName: 'Test User',
  memberTier: 'founding10',
  messageLength: 38,
  actualMessage: 'I need a private jet to Paris tomorrow...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [ulqp9a] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [ulqp9a] Input Context: { messageLength: 38, memberTier: 'founding10', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test User
[AGENT_LOOP] Message: I need a private jet to Paris tomorrow...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "I need a private jet to Paris tomorrow"
🧠 [PLANNER] Context: history=0, member=founding10
🧠 [PLANNER] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [],
  preferences: [ 'a private jet to Paris tomorrow' ]
}
🧠 [PLANNER] Bucket scores: {
  transportation: 1,
  events: 0,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 0
}
🧠 [PLANNER] Urgency: urgent
🧠 [PLANNER] Suggested tier: extraordinary
🧠 [PLANNER] Sorted buckets: [
  [ 'transportation', 1 ],
  [ 'events', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ],
  [ 'lifestyle', 0 ]
]
🧠 [PLANNER] Primary bucket: transportation
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: private aviation
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'transportation',
  secondaryBuckets: [],
  serviceType: 'private aviation',
  urgency: 'urgent',
  confidence: 1,
  extractedEntities: {
    dates: [ 'tomorrow' ],
    locations: [ 'Paris' ],
    people: [],
    preferences: [ 'a private jet to Paris tomorrow' ]
  },
  suggestedTier: 'extraordinary'
}
[AGENT_LOOP] Intent: transportation (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430258103_ds6ln] Starting execution for bucket: transportation
🔧 [EXECUTOR exec_1749430258103_ds6ln] Context: {
  bucket: 'transportation',
  confidence: 1,
  urgency: 'urgent',
  memberTier: 'founding10',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: transportation, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for transportation (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: private aviation, Urgency: urgent
🔍 [WORKFLOW_BRIDGE] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [],
  preferences: [ 'a private jet to Paris tomorrow' ]
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel triggers detected: {
  hasLocations: true,
  hasDestinations: false,
  bucket: 'transportation',
  serviceType: 'private aviation',
  isTransportation: true
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel workflow triggered
[WORKFLOW_BRIDGE] Member tier founding10 insufficient for travel workflow
⚙️ [TOOL exec_1749430258103_ds6ln] Executing: fetch_active_services
⚙️ [TOOL exec_1749430258103_ds6ln] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL 0bmm3n] =================================
⚙️ [TOOL 0bmm3n] Executing: fetch_active_services
⚙️ [TOOL 0bmm3n] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL 0bmm3n] Calling fetch_active_services...
⚙️ [TOOL 0bmm3n] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL 0bmm3n] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430258103_ds6ln] Step completed in 0ms
✅ [TOOL exec_1749430258103_ds6ln] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430258103_ds6ln] Executing: create_ticket
⚙️ [TOOL exec_1749430258103_ds6ln] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tomorrow', destination: 'Paris' },
  priority: 'urgent'
}
⚙️ [TOOL w3nugk] =================================
⚙️ [TOOL w3nugk] Executing: create_ticket
⚙️ [TOOL w3nugk] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tomorrow', destination: 'Paris' },
  priority: 'urgent'
}
⚙️ [TOOL w3nugk] Calling create_ticket...
⚙️ [TOOL w3nugk] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL w3nugk] create_ticket returned: {
  ticketId: 'TAG-MBODLUBC',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL w3nugk] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430258103_ds6ln] Step completed in 606ms
✅ [TOOL exec_1749430258103_ds6ln] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430258103_ds6ln] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 610,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for transportation request
[GOAL_CHECKER] Goals ACHIEVED (score: 69.7%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: transportation, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: true, Score: 0.6966666666666668
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for transportation...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'transportation',
  serviceType: 'private aviation',
  confidence: 1,
  goalAchieved: true,
  goalScore: 0.6966666666666668,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: transportation, type: private aviation
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 219,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. To ensure I sele..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. To ensure I sele..."
[AGENT_LOOP] Complete in 633ms - Goals ACHIEVED
🚨 DIAGNOSTIC [ulqp9a] Agent loop returned: {
  success: true,
  responseLength: 619,
  intentAnalysis: 'transportation',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [ulqp9a]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [ulqp9a]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [ulqp9a]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 0,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 606,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 638.0700000000033ms
   ├─ Phase: execution
   ├─ Confidence: 0.6966666666666668
   ├─ Intent: transportation_aviation
   └─ Actions: 4
🔍 [API ulqp9a] Analyzing message for booking confirmation...
🎫 [API ulqp9a] Ticket creation check: {
  agentSuccess: true,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API ulqp9a] Creating service ticket with Firebase storage...
🎫 [API ulqp9a] Parameters: {
  message: 'I need a private jet to Paris tomorrow...',
  memberId: 'test',
  memberTier: 'founding10',
  useFirebase: true
}
❌ [API ulqp9a] FIREBASE TICKET CREATION ERROR: TypeError: conversationHistory.filter is not a function
    at extractConversationDetails (src/lib/services/tickets.js:53:5)
    at createServiceTicket (src/lib/services/tickets.js:15:18)
    at POST (src/app/api/chat/route.ts:507:49)
  51 |   // Combine all user messages into analysis
  52 |   const allUserMessages = conversationHistory
> 53 |     .filter(msg => msg.role === 'user')
     |     ^
  54 |     .map(msg => msg.content)
  55 |     .join(' ');
  56 |   
❌ [API ulqp9a] Error type: object
❌ [API ulqp9a] Error message: conversationHistory.filter is not a function
❌ [API ulqp9a] Error stack: TypeError: conversationHistory.filter is not a function
    at extractConversationDetails (webpack-internal:///(rsc)/./src/lib/services/tickets.js:41:49)
    at createServiceTicket (webpack-internal:///(rsc)/./src/lib/services/tickets.js:13:21)
    at POST (webpack-internal:///(rsc)/./src/app/api/chat/route.ts:452:112)
    at async AppRouteRouteModule.do (/Users/mndst/asteria-mvp/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:26:34112)
    at async AppRouteRouteModule.handle (/Users/mndst/asteria-mvp/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:26:41338)
    at async doRender (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1518:42)
    at async DevServer.renderToResponseWithComponentsImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1920:28)
    at async DevServer.renderPageComponent (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:2408:24)
    at async DevServer.renderToResponseImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:2445:32)
    at async DevServer.pipeImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1008:25)
    at async NextNodeServer.handleCatchallRenderRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/next-server.js:305:17)
    at async DevServer.handleRequestImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:900:17)
    at async /Users/mndst/asteria-mvp/node_modules/next/dist/server/dev/next-dev-server.js:371:20
    at async Span.traceAsyncFn (/Users/mndst/asteria-mvp/node_modules/next/dist/trace/trace.js:157:20)
    at async DevServer.handleRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/dev/next-dev-server.js:368:24)
    at async invokeRender (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:237:21)
    at async handleRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:428:24)
    at async requestHandlerImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:452:13)
    at async Server.requestListener (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/start-server.js:158:13)
⚠️ [API ulqp9a] Continuing without ticket creation due to Firebase error
📤 [API ulqp9a] Final response analysis: {
  messageLength: 619,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: true,
  toolsUsed: 4,
  confidence: 0.6966666666666668,
  processingTime: 712,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API ulqp9a] Sending to frontend - response field: "I'd be delighted to arrange your private aviation experience to Paris for tomorr..."
 POST /api/chat 200 in 5743ms
 ✓ Compiled /favicon.ico in 317ms (2650 modules)
 GET /favicon.ico 200 in 376ms
 ✓ Compiled in 234ms (2650 modules)
 ✓ Compiled in 201ms (2650 modules)
 ○ Compiling / ...
 ✓ Compiled / in 4s (4312 modules)
 ⚠ Fast Refresh had to perform a full reload due to a runtime error.
 GET / 200 in 4635ms
 ○ Compiling /_not-found ...
 ✓ Compiled /_not-found in 653ms (4302 modules)
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 629ms
 GET /favicon.ico 200 in 17ms
 ✓ Compiled in 613ms (1792 modules)
 GET / 200 in 157ms
 ○ Compiling /favicon.ico ...
 ✓ Compiled /favicon.ico in 513ms (1808 modules)
 GET /favicon.ico 200 in 590ms
 GET / 200 in 124ms
 GET /favicon.ico 200 in 3ms
 ✓ Compiled in 132ms (783 modules)
 GET / 200 in 10ms
 ✓ Compiled in 179ms (783 modules)
 GET / 200 in 22ms
 ✓ Compiled in 260ms (783 modules)
 GET / 200 in 22ms
 ✓ Compiled in 133ms (783 modules)
 GET / 200 in 11ms
 ○ Compiling /api/chat ...
 ✓ Compiled /api/chat in 1514ms (3529 modules)
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [WORKFLOW_SYSTEM] Initializing global workflow engine...
   ├─ Max concurrent workflows: 10
   ├─ Parallel execution: enabled
   ├─ Auto retry: enabled
   └─ Status: ✅ OPERATIONAL

🚨 DIAGNOSTIC [xo1ny] ================================
🚨 CHAT API CALLED: 2025-06-09T00:54:10.537Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [xo1ny] Request Body:
   ├─ Message: "I need a private jet to Paris tomorrow"
   ├─ Session ID: test123
   ├─ History Length: 0
   └─ Full Body Keys: message, conversationHistory, sessionId, memberProfile
👤 Guest user: Test User
🚨 DIAGNOSTIC [xo1ny] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "I need a private jet to Paris tomorrow..."
🚨 DIAGNOSTIC [xo1ny] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [xo1ny] Agent loop created successfully
🚨 DIAGNOSTIC [xo1ny] Creating direct agent context...
🚨 DIAGNOSTIC [xo1ny] Direct context created: {
  memberId: 'test',
  memberName: 'Test User',
  memberTier: 'founding10',
  messageLength: 38,
  actualMessage: 'I need a private jet to Paris tomorrow...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [xo1ny] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [xo1ny] Input Context: { messageLength: 38, memberTier: 'founding10', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test User
[AGENT_LOOP] Message: I need a private jet to Paris tomorrow...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "I need a private jet to Paris tomorrow"
🧠 [PLANNER] Context: history=0, member=founding10
🧠 [PLANNER] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [],
  preferences: [ 'a private jet to Paris tomorrow' ]
}
🧠 [PLANNER] Bucket scores: {
  transportation: 1,
  events: 0,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 0
}
🧠 [PLANNER] Urgency: urgent
🧠 [PLANNER] Suggested tier: extraordinary
🧠 [PLANNER] Sorted buckets: [
  [ 'transportation', 1 ],
  [ 'events', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ],
  [ 'lifestyle', 0 ]
]
🧠 [PLANNER] Primary bucket: transportation
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: private aviation
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'transportation',
  secondaryBuckets: [],
  serviceType: 'private aviation',
  urgency: 'urgent',
  confidence: 1,
  extractedEntities: {
    dates: [ 'tomorrow' ],
    locations: [ 'Paris' ],
    people: [],
    preferences: [ 'a private jet to Paris tomorrow' ]
  },
  suggestedTier: 'extraordinary'
}
[AGENT_LOOP] Intent: transportation (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430450541_ti3mt] Starting execution for bucket: transportation
🔧 [EXECUTOR exec_1749430450541_ti3mt] Context: {
  bucket: 'transportation',
  confidence: 1,
  urgency: 'urgent',
  memberTier: 'founding10',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: transportation, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for transportation (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: private aviation, Urgency: urgent
🔍 [WORKFLOW_BRIDGE] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [],
  preferences: [ 'a private jet to Paris tomorrow' ]
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel triggers detected: {
  hasLocations: true,
  hasDestinations: false,
  bucket: 'transportation',
  serviceType: 'private aviation',
  isTransportation: true
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel workflow triggered
[WORKFLOW_BRIDGE] Member tier founding10 insufficient for travel workflow
⚙️ [TOOL exec_1749430450541_ti3mt] Executing: fetch_active_services
⚙️ [TOOL exec_1749430450541_ti3mt] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL 0g6r6a] =================================
⚙️ [TOOL 0g6r6a] Executing: fetch_active_services
⚙️ [TOOL 0g6r6a] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL 0g6r6a] Calling fetch_active_services...
⚙️ [TOOL 0g6r6a] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL 0g6r6a] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430450541_ti3mt] Step completed in 1ms
✅ [TOOL exec_1749430450541_ti3mt] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430450541_ti3mt] Executing: create_ticket
⚙️ [TOOL exec_1749430450541_ti3mt] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tomorrow', destination: 'Paris' },
  priority: 'urgent'
}
⚙️ [TOOL 0ukdvd] =================================
⚙️ [TOOL 0ukdvd] Executing: create_ticket
⚙️ [TOOL 0ukdvd] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tomorrow', destination: 'Paris' },
  priority: 'urgent'
}
⚙️ [TOOL 0ukdvd] Calling create_ticket...
⚙️ [TOOL 0ukdvd] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL 0ukdvd] create_ticket returned: {
  ticketId: 'TAG-MBODPYSU',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL 0ukdvd] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430450541_ti3mt] Step completed in 2ms
✅ [TOOL exec_1749430450541_ti3mt] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430450541_ti3mt] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 6,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for transportation request
[GOAL_CHECKER] Goals ACHIEVED (score: 69.7%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: transportation, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: true, Score: 0.6966666666666668
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for transportation...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'transportation',
  serviceType: 'private aviation',
  confidence: 1,
  goalAchieved: true,
  goalScore: 0.6966666666666668,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: transportation, type: private aviation
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 219,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. To ensure I sele..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. To ensure I sele..."
[AGENT_LOOP] Complete in 69ms - Goals ACHIEVED
🚨 DIAGNOSTIC [xo1ny] Agent loop returned: {
  success: true,
  responseLength: 619,
  intentAnalysis: 'transportation',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [xo1ny]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [xo1ny]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [xo1ny]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 1,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 2,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 70.41274999998859ms
   ├─ Phase: execution
   ├─ Confidence: 0.6966666666666668
   ├─ Intent: transportation_aviation
   └─ Actions: 4
🔍 [API xo1ny] Analyzing message for booking confirmation...
🎫 [API xo1ny] Ticket creation check: {
  agentSuccess: true,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API xo1ny] Creating service ticket with Firebase storage...
🎫 [API xo1ny] Parameters: {
  message: 'I need a private jet to Paris tomorrow...',
  memberId: 'test',
  memberTier: 'founding10',
  useFirebase: true
}
🔥 [FIREBASE] Storing ticket SR-97780608 to Firestore...
 GET / 200 in 69ms
🔐 Loading Firebase service account credentials from GCP Secret Manager...
✅ Retrieved secret from GCP: firebase-service-account-key
✅ Firebase Admin initialized with service account credentials from GCP Secret Manager
✅ [FIREBASE] Ticket SR-97780608 stored successfully with doc ID: PFIK6jjI6v4241mv5u8a
🎫 [API xo1ny] Ticket created with Firebase storage: SR-97780608
🔥 [API xo1ny] Firebase document ID: PFIK6jjI6v4241mv5u8a
🔔 Processing Slack notification for ticket SR-97780608
📤 Sending Slack notification for HIGH priority ticket SR-97780608
✅ Slack notification sent successfully for ticket SR-97780608
❌ Failed to send SMS notification: Error: 'From' +17027689728 is not a Twilio phone number or Short Code country mismatch
    at async sendSMSNotification (src/lib/notifications/sms.js:22:4)
    at async POST (src/app/api/chat/route.ts:521:8)
  20 |   
  21 |   try {
> 22 |     await twilio.messages.create({
     |    ^
  23 |       body: message,
  24 |       from: process.env.TWILIO_PHONE_NUMBER,
  25 |       to: process.env.CONCIERGE_PHONE_NUMBER {
  status: 400,
  code: 21659,
  moreInfo: 'https://www.twilio.com/docs/errors/21659',
  details: undefined
}
🎫 [API xo1ny] Service ticket created: SR-97780608 for Test User (tier: founding10)
📤 [API xo1ny] Final response analysis: {
  messageLength: 619,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: true,
  toolsUsed: 4,
  confidence: 0.6966666666666668,
  processingTime: 2215,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API xo1ny] Sending to frontend - response field: "I'd be delighted to arrange your private aviation experience to Paris for tomorr..."
 POST /api/chat 200 in 6284ms

🚨 DIAGNOSTIC [hdj5ej] ================================
🚨 CHAT API CALLED: 2025-06-09T00:54:22.406Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [hdj5ej] Request Body:
   ├─ Message: "I need a private jet to Paris tomorrow for 6 passengers"
   ├─ Session ID: firebase-test-1749430462348
   ├─ History Length: 0
   └─ Full Body Keys: message, sessionId, memberProfile
👤 Guest user: Test Founding Member
🚨 DIAGNOSTIC [hdj5ej] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "I need a private jet to Paris tomorrow for 6 passe..."
🚨 DIAGNOSTIC [hdj5ej] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [hdj5ej] Agent loop created successfully
🚨 DIAGNOSTIC [hdj5ej] Creating direct agent context...
🚨 DIAGNOSTIC [hdj5ej] Direct context created: {
  memberId: 'test-member-founding',
  memberName: 'Test Founding Member',
  memberTier: 'founding10',
  messageLength: 55,
  actualMessage: 'I need a private jet to Paris tomorrow for 6 passe...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [hdj5ej] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [hdj5ej] Input Context: { messageLength: 55, memberTier: 'founding10', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test Founding Member
[AGENT_LOOP] Message: I need a private jet to Paris tomorrow for 6 passengers...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "I need a private jet to Paris tomorrow for 6 passengers"
🧠 [PLANNER] Context: history=0, member=founding10
🧠 [PLANNER] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [ '6 passengers' ],
  preferences: [ 'a private jet to Paris tomorrow for 6 passengers' ]
}
🧠 [PLANNER] Bucket scores: {
  transportation: 1,
  events: 0,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 0
}
🧠 [PLANNER] Urgency: urgent
🧠 [PLANNER] Suggested tier: extraordinary
🧠 [PLANNER] Sorted buckets: [
  [ 'transportation', 1 ],
  [ 'events', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ],
  [ 'lifestyle', 0 ]
]
🧠 [PLANNER] Primary bucket: transportation
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: private aviation
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'transportation',
  secondaryBuckets: [],
  serviceType: 'private aviation',
  urgency: 'urgent',
  confidence: 1,
  extractedEntities: {
    dates: [ 'tomorrow' ],
    locations: [ 'Paris' ],
    people: [ '6 passengers' ],
    preferences: [ 'a private jet to Paris tomorrow for 6 passengers' ]
  },
  suggestedTier: 'extraordinary'
}
[AGENT_LOOP] Intent: transportation (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430462410_8jwts] Starting execution for bucket: transportation
🔧 [EXECUTOR exec_1749430462410_8jwts] Context: {
  bucket: 'transportation',
  confidence: 1,
  urgency: 'urgent',
  memberTier: 'founding10',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: transportation, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for transportation (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: private aviation, Urgency: urgent
🔍 [WORKFLOW_BRIDGE] Extracted entities: {
  dates: [ 'tomorrow' ],
  locations: [ 'Paris' ],
  people: [ '6 passengers' ],
  preferences: [ 'a private jet to Paris tomorrow for 6 passengers' ]
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel triggers detected: {
  hasLocations: true,
  hasDestinations: false,
  bucket: 'transportation',
  serviceType: 'private aviation',
  isTransportation: true
}
✈️ [WORKFLOW_BRIDGE] Amadeus travel workflow triggered
[WORKFLOW_BRIDGE] Member tier founding10 insufficient for travel workflow
⚙️ [TOOL exec_1749430462410_8jwts] Executing: fetch_active_services
⚙️ [TOOL exec_1749430462410_8jwts] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL qsa6ro] =================================
⚙️ [TOOL qsa6ro] Executing: fetch_active_services
⚙️ [TOOL qsa6ro] Parameters: {
  bucket: 'transportation',
  tier: 'extraordinary',
  searchTerm: 'private aviation'
}
⚙️ [TOOL qsa6ro] Calling fetch_active_services...
⚙️ [TOOL qsa6ro] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL qsa6ro] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430462410_8jwts] Step completed in 0ms
✅ [TOOL exec_1749430462410_8jwts] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430462410_8jwts] Executing: create_ticket
⚙️ [TOOL exec_1749430462410_8jwts] Parameters: {
  serviceId: 'to_be_determined',
  requirements: {
    date: 'tomorrow',
    destination: 'Paris',
    passengers: '6 passengers'
  },
  priority: 'urgent'
}
⚙️ [TOOL 5v9z2v] =================================
⚙️ [TOOL 5v9z2v] Executing: create_ticket
⚙️ [TOOL 5v9z2v] Parameters: {
  serviceId: 'to_be_determined',
  requirements: {
    date: 'tomorrow',
    destination: 'Paris',
    passengers: '6 passengers'
  },
  priority: 'urgent'
}
⚙️ [TOOL 5v9z2v] Calling create_ticket...
⚙️ [TOOL 5v9z2v] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL 5v9z2v] create_ticket returned: {
  ticketId: 'TAG-MBODQ7YI',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL 5v9z2v] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430462410_8jwts] Step completed in 1ms
✅ [TOOL exec_1749430462410_8jwts] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430462410_8jwts] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test-member-founding
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 4,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for transportation request
[GOAL_CHECKER] Goals ACHIEVED (score: 69.7%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: transportation, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: true, Score: 0.6966666666666668
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for transportation...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'transportation',
  serviceType: 'private aviation',
  confidence: 1,
  goalAchieved: true,
  goalScore: 0.6966666666666668,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: transportation, type: private aviation
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 242,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. I'm reviewing ou..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'd be delighted to arrange your private aviation experience to Paris for tomorrow. I'm reviewing ou..."
[AGENT_LOOP] Complete in 7ms - Goals ACHIEVED
🚨 DIAGNOSTIC [hdj5ej] Agent loop returned: {
  success: true,
  responseLength: 642,
  intentAnalysis: 'transportation',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [hdj5ej]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [hdj5ej]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [hdj5ej]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 0,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 1,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 8.602290999988327ms
   ├─ Phase: execution
   ├─ Confidence: 0.6966666666666668
   ├─ Intent: transportation_aviation
   └─ Actions: 4
🔍 [API hdj5ej] Analyzing message for booking confirmation...
🎫 [API hdj5ej] Ticket creation check: {
  agentSuccess: true,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API hdj5ej] Creating service ticket with Firebase storage...
🎫 [API hdj5ej] Parameters: {
  message: 'I need a private jet to Paris tomorrow for 6 passe...',
  memberId: 'test-member-founding',
  memberTier: 'founding10',
  useFirebase: true
}
🔥 [FIREBASE] Storing ticket SR-67732414 to Firestore...
✅ [FIREBASE] Ticket SR-67732414 stored successfully with doc ID: tQAxpY5r72FuIq3FcFFf
🎫 [API hdj5ej] Ticket created with Firebase storage: SR-67732414
🔥 [API hdj5ej] Firebase document ID: tQAxpY5r72FuIq3FcFFf
🔔 Processing Slack notification for ticket SR-67732414
📤 Sending Slack notification for HIGH priority ticket SR-67732414
✅ Slack notification sent successfully for ticket SR-67732414
❌ Failed to send SMS notification: Error: 'From' +17027689728 is not a Twilio phone number or Short Code country mismatch
    at async sendSMSNotification (src/lib/notifications/sms.js:22:4)
    at async POST (src/app/api/chat/route.ts:521:8)
  20 |   
  21 |   try {
> 22 |     await twilio.messages.create({
     |    ^
  23 |       body: message,
  24 |       from: process.env.TWILIO_PHONE_NUMBER,
  25 |       to: process.env.CONCIERGE_PHONE_NUMBER {
  status: 400,
  code: 21659,
  moreInfo: 'https://www.twilio.com/docs/errors/21659',
  details: undefined
}
🎫 [API hdj5ej] Service ticket created: SR-67732414 for Test Founding Member (tier: founding10)
📤 [API hdj5ej] Final response analysis: {
  messageLength: 642,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: true,
  toolsUsed: 4,
  confidence: 0.6966666666666668,
  processingTime: 1075,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API hdj5ej] Sending to frontend - response field: "I'd be delighted to arrange your private aviation experience to Paris for tomorr..."
 POST /api/chat 200 in 1088ms

🚨 DIAGNOSTIC [gp6snk] ================================
🚨 CHAT API CALLED: 2025-06-09T00:54:23.583Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [gp6snk] Request Body:
   ├─ Message: "Can you book me dinner at a Michelin restaurant tonight?"
   ├─ Session ID: firebase-test-1749430463487
   ├─ History Length: 0
   └─ Full Body Keys: message, sessionId, memberProfile
👤 Guest user: Test Fifty-K Member
🚨 DIAGNOSTIC [gp6snk] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "Can you book me dinner at a Michelin restaurant to..."
🚨 DIAGNOSTIC [gp6snk] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [gp6snk] Agent loop created successfully
🚨 DIAGNOSTIC [gp6snk] Creating direct agent context...
🚨 DIAGNOSTIC [gp6snk] Direct context created: {
  memberId: 'test-member-fifty-k',
  memberName: 'Test Fifty-K Member',
  memberTier: 'fifty-k',
  messageLength: 56,
  actualMessage: 'Can you book me dinner at a Michelin restaurant to...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [gp6snk] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [gp6snk] Input Context: { messageLength: 56, memberTier: 'fifty-k', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test Fifty-K Member
[AGENT_LOOP] Message: Can you book me dinner at a Michelin restaurant tonight?...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "Can you book me dinner at a Michelin restaurant tonight?"
🧠 [PLANNER] Context: history=0, member=fifty-k
🧠 [PLANNER] Extracted entities: { dates: [ 'tonight' ], locations: [], people: [], preferences: [] }
🧠 [PLANNER] Bucket scores: {
  transportation: 0,
  events: 1,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 0
}
🧠 [PLANNER] Urgency: urgent
🧠 [PLANNER] Suggested tier: better
🧠 [PLANNER] Sorted buckets: [
  [ 'events', 1 ],
  [ 'transportation', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ],
  [ 'lifestyle', 0 ]
]
🧠 [PLANNER] Primary bucket: events
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: private venue
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'events',
  secondaryBuckets: [],
  serviceType: 'private venue',
  urgency: 'urgent',
  confidence: 1,
  extractedEntities: { dates: [ 'tonight' ], locations: [], people: [], preferences: [] },
  suggestedTier: 'better'
}
[AGENT_LOOP] Intent: events (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430463584_5bpbs] Starting execution for bucket: events
🔧 [EXECUTOR exec_1749430463584_5bpbs] Context: {
  bucket: 'events',
  confidence: 1,
  urgency: 'urgent',
  memberTier: 'fifty-k',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: events, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for events (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: private venue, Urgency: urgent
🔍 [WORKFLOW_BRIDGE] Extracted entities: { dates: [ 'tonight' ], locations: [], people: [], preferences: [] }
🎤 [WORKFLOW_BRIDGE] ElevenLabs voice-enabled event workflow triggered
[WORKFLOW_BRIDGE] Member tier fifty-k insufficient for booking workflow
⚙️ [TOOL exec_1749430463584_5bpbs] Executing: fetch_active_services
⚙️ [TOOL exec_1749430463584_5bpbs] Parameters: { bucket: 'events', tier: 'better', searchTerm: 'private venue' }
⚙️ [TOOL ebq70h] =================================
⚙️ [TOOL ebq70h] Executing: fetch_active_services
⚙️ [TOOL ebq70h] Parameters: { bucket: 'events', tier: 'better', searchTerm: 'private venue' }
⚙️ [TOOL ebq70h] Calling fetch_active_services...
⚙️ [TOOL ebq70h] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL ebq70h] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430463584_5bpbs] Step completed in 1ms
✅ [TOOL exec_1749430463584_5bpbs] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430463584_5bpbs] Executing: create_ticket
⚙️ [TOOL exec_1749430463584_5bpbs] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tonight' },
  priority: 'urgent'
}
⚙️ [TOOL rvdgqm] =================================
⚙️ [TOOL rvdgqm] Executing: create_ticket
⚙️ [TOOL rvdgqm] Parameters: {
  serviceId: 'to_be_determined',
  requirements: { date: 'tonight' },
  priority: 'urgent'
}
⚙️ [TOOL rvdgqm] Calling create_ticket...
⚙️ [TOOL rvdgqm] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL rvdgqm] create_ticket returned: {
  ticketId: 'TAG-MBODQ8V5',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL rvdgqm] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430463584_5bpbs] Step completed in 1ms
✅ [TOOL exec_1749430463584_5bpbs] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430463584_5bpbs] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test-member-fifty-k
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 2,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for events request
[GOAL_CHECKER] Goals ACHIEVED (score: 81.7%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: events, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: true, Score: 0.817391304347826
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for events...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'events',
  serviceType: 'private venue',
  confidence: 1,
  goalAchieved: true,
  goalScore: 0.817391304347826,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: events, type: private venue
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 297,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'm excited to help you access exclusive events and experiences. Whether you're seeking VIP access t..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'm excited to help you access exclusive events and experiences. Whether you're seeking VIP access t..."
[AGENT_LOOP] Complete in 4ms - Goals ACHIEVED
🚨 DIAGNOSTIC [gp6snk] Agent loop returned: {
  success: true,
  responseLength: 697,
  intentAnalysis: 'events',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [gp6snk]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [gp6snk]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [gp6snk]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 1,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 1,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 6.093082999985199ms
   ├─ Phase: execution
   ├─ Confidence: 0.817391304347826
   ├─ Intent: events_experiences
   └─ Actions: 4
🔍 [API gp6snk] Analyzing message for booking confirmation...
🎫 [API gp6snk] Ticket creation check: {
  agentSuccess: true,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API gp6snk] Creating service ticket with Firebase storage...
🎫 [API gp6snk] Parameters: {
  message: 'Can you book me dinner at a Michelin restaurant to...',
  memberId: 'test-member-fifty-k',
  memberTier: 'fifty-k',
  useFirebase: true
}
🔥 [FIREBASE] Storing ticket SR-53953589 to Firestore...
✅ [FIREBASE] Ticket SR-53953589 stored successfully with doc ID: naZk4WXByRHji6lrKpdU
🎫 [API gp6snk] Ticket created with Firebase storage: SR-53953589
🔥 [API gp6snk] Firebase document ID: naZk4WXByRHji6lrKpdU
🔔 Processing Slack notification for ticket SR-53953589
📤 Sending Slack notification for HIGH priority ticket SR-53953589
✅ Slack notification sent successfully for ticket SR-53953589
❌ Failed to send SMS notification: Error: 'From' +17027689728 is not a Twilio phone number or Short Code country mismatch
    at async sendSMSNotification (src/lib/notifications/sms.js:22:4)
    at async POST (src/app/api/chat/route.ts:521:8)
  20 |   
  21 |   try {
> 22 |     await twilio.messages.create({
     |    ^
  23 |       body: message,
  24 |       from: process.env.TWILIO_PHONE_NUMBER,
  25 |       to: process.env.CONCIERGE_PHONE_NUMBER {
  status: 400,
  code: 21659,
  moreInfo: 'https://www.twilio.com/docs/errors/21659',
  details: undefined
}
🎫 [API gp6snk] Service ticket created: SR-53953589 for Test Fifty-K Member (tier: fifty-k)
📤 [API gp6snk] Final response analysis: {
  messageLength: 697,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: true,
  toolsUsed: 4,
  confidence: 0.817391304347826,
  processingTime: 817,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API gp6snk] Sending to frontend - response field: "I'm excited to help you access exclusive events and experiences. Whether you're ..."
 POST /api/chat 200 in 844ms

🚨 DIAGNOSTIC [ynm59k] ================================
🚨 CHAT API CALLED: 2025-06-09T00:54:24.416Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [ynm59k] Request Body:
   ├─ Message: "Perfect, please go ahead and book it"
   ├─ Session ID: firebase-test-1749430464402-followup
   ├─ History Length: 0
   └─ Full Body Keys: message, sessionId, memberProfile
👤 Guest user: Test Fifty-K Member
🚨 DIAGNOSTIC [ynm59k] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "Perfect, please go ahead and book it..."
🚨 DIAGNOSTIC [ynm59k] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [ynm59k] Agent loop created successfully
🚨 DIAGNOSTIC [ynm59k] Creating direct agent context...
🚨 DIAGNOSTIC [ynm59k] Direct context created: {
  memberId: 'test-member-fifty-k',
  memberName: 'Test Fifty-K Member',
  memberTier: 'fifty-k',
  messageLength: 36,
  actualMessage: 'Perfect, please go ahead and book it...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [ynm59k] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [ynm59k] Input Context: { messageLength: 36, memberTier: 'fifty-k', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test Fifty-K Member
[AGENT_LOOP] Message: Perfect, please go ahead and book it...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "Perfect, please go ahead and book it"
🧠 [PLANNER] Context: history=0, member=fifty-k
🧠 [PLANNER] Extracted entities: { dates: [], locations: [], people: [], preferences: [] }
🧠 [PLANNER] Bucket scores: {
  transportation: 0,
  events: 1,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 0
}
🧠 [PLANNER] Urgency: standard
🧠 [PLANNER] Suggested tier: better
🧠 [PLANNER] Sorted buckets: [
  [ 'events', 1 ],
  [ 'transportation', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ],
  [ 'lifestyle', 0 ]
]
🧠 [PLANNER] Primary bucket: events
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: private venue
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'events',
  secondaryBuckets: [],
  serviceType: 'private venue',
  urgency: 'standard',
  confidence: 1,
  extractedEntities: { dates: [], locations: [], people: [], preferences: [] },
  suggestedTier: 'better'
}
[AGENT_LOOP] Intent: events (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430464418_6gcpl] Starting execution for bucket: events
🔧 [EXECUTOR exec_1749430464418_6gcpl] Context: {
  bucket: 'events',
  confidence: 1,
  urgency: 'standard',
  memberTier: 'fifty-k',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: events, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for events (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: private venue, Urgency: standard
🔍 [WORKFLOW_BRIDGE] Extracted entities: { dates: [], locations: [], people: [], preferences: [] }
🎤 [WORKFLOW_BRIDGE] ElevenLabs voice-enabled event workflow triggered
[WORKFLOW_BRIDGE] Member tier fifty-k insufficient for booking workflow
⚙️ [TOOL exec_1749430464418_6gcpl] Executing: search_luxury_knowledge
⚙️ [TOOL exec_1749430464418_6gcpl] Parameters: {
  query: 'events private venue luxury services',
  serviceCategory: 'events',
  memberTier: 'better'
}
⚙️ [TOOL 2dmdt] =================================
⚙️ [TOOL 2dmdt] Executing: search_luxury_knowledge
⚙️ [TOOL 2dmdt] Parameters: {
  query: 'events private venue luxury services',
  serviceCategory: 'events',
  memberTier: 'better'
}
⚙️ [TOOL 2dmdt] Calling search_luxury_knowledge...
❌ [TOOL 2dmdt] Tool execution failed: Error: ENOENT: no such file or directory, open './test/data/05-versions-space.pdf'
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./src/lib/rag/luxury-rag-service.ts:8:67)
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./src/lib/agent/tools/search_luxury_knowledge.ts:5:81)
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at async ServiceExecutor.executeTool (src/lib/agent/core/executor.ts:536:44)
    at async ServiceExecutor.executeService (src/lib/agent/core/executor.ts:186:23)
    at async AsteriaAgentLoop.processRequest (src/lib/agent/core/agent_loop.ts:98:30)
    at async POST (src/app/api/chat/route.ts:315:24)
  534 |         case 'search_luxury_knowledge':
  535 |           console.log(`⚙️ [TOOL ${stepId}] Calling search_luxury_knowledge...`);
> 536 |           const { searchLuxuryKnowledge } = await import('../tools/search_luxury_knowledge');
      |                                            ^
  537 |           result = await searchLuxuryKnowledge(parameters);
  538 |           console.log(`⚙️ [TOOL ${stepId}] search_luxury_knowledge returned:`, {
  539 |             success: result?.success || false, {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: './test/data/05-versions-space.pdf'
}
❌ [TOOL 2dmdt] Error details: {
  toolName: 'search_luxury_knowledge',
  errorMessage: "ENOENT: no such file or directory, open './test/data/05-versions-space.pdf'",
  errorType: 'object',
  stack: "Error: ENOENT: no such file or directory, open './test/data/05-versions-space.pdf'\n" +
    '    at Object.openSync (node:fs:553:18)\n' +
    '    at Object.readFileSync (node:fs:437:35)\n' +
    '    at eval (webpack-internal:///(rsc)/./node_modules/pdf-parse/index.js:16:25)\n' +
    '    at (rsc)/./node_modules/pdf-parse/index.js (/Users/mndst/asteria-mvp/.next/server/vendor-chunks/pdf-parse.js:19:1)\n' +
    '    at __webpack_require__ (/Users/mndst/asteria-mvp/.next/server/webpack-runtime.js:33:43)\n' +
    '    at eval (webpack-internal:///(rsc)/./src/lib/rag/luxury-rag-service.ts:8:67)\n' +
    '    at (rsc)/./src/lib/rag/luxury-rag-service.ts (/Users/mndst/asteria-mvp/.next/server/_rsc_node_modules_pdf-parse_lib_pdf_js_sync_recursive_build_pdf_js_-_rsc_src_lib_agent_tools_-c16b6c.js:66:1)\n' +
    '    at __webpack_require__ (/Users/mndst/asteria-mvp/.next/server/webpack-runtime.js:33:43)\n' +
    '    at eval (webpack-internal:///(rsc)/./src/lib/agent/tools/search_luxury_knowledge.ts:5:81)\n' +
    '    at (rsc)/./src/lib/agent/tools/search_luxury_knowledge.ts (/Users/mndst/asteria-mvp/.next/server/_rsc_node_modules_pdf-parse_lib_pdf_js_sync_recursive_build_pdf_js_-_rsc_src_lib_agent_tools_-c16b6c.js:55:1)\n' +
    '    at __webpack_require__ (/Users/mndst/asteria-mvp/.next/server/webpack-runtime.js:33:43)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async ServiceExecutor.executeTool (webpack-internal:///(rsc)/./src/lib/agent/core/executor.ts:444:55)\n' +
    '    at async ServiceExecutor.executeService (webpack-internal:///(rsc)/./src/lib/agent/core/executor.ts:134:32)\n' +
    '    at async AsteriaAgentLoop.processRequest (webpack-internal:///(rsc)/./src/lib/agent/core/agent_loop.ts:69:37)\n' +
    '    at async POST (webpack-internal:///(rsc)/./src/app/api/chat/route.ts:274:31)\n' +
    '    at async AppRouteRouteModule.do (/Users/mndst/asteria-mvp/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:26:34112)\n' +
    '    at async AppRouteRouteModule.handle (/Users/mndst/asteria-mvp/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:26:41338)\n' +
    '    at async doRender (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1518:42)\n' +
    '    at async DevServer.renderToResponseWithComponentsImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1920:28)\n' +
    '    at async DevServer.renderPageComponent (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:2408:24)\n' +
    '    at async DevServer.renderToResponseImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:2445:32)\n' +
    '    at async DevServer.pipeImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:1008:25)\n' +
    '    at async NextNodeServer.handleCatchallRenderRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/next-server.js:305:17)\n' +
    '    at async DevServer.handleRequestImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/base-server.js:900:17)\n' +
    '    at async /Users/mndst/asteria-mvp/node_modules/next/dist/server/dev/next-dev-server.js:371:20\n' +
    '    at async Span.traceAsyncFn (/Users/mndst/asteria-mvp/node_modules/next/dist/trace/trace.js:157:20)\n' +
    '    at async DevServer.handleRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/dev/next-dev-server.js:368:24)\n' +
    '    at async invokeRender (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:237:21)\n' +
    '    at async handleRequest (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:428:24)\n' +
    '    at async requestHandlerImpl (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/router-server.js:452:13)\n' +
    '    at async Server.requestListener (/Users/mndst/asteria-mvp/node_modules/next/dist/server/lib/start-server.js:158:13)'
}
❌ [TOOL exec_1749430464418_6gcpl] Step failed: Error: ENOENT: no such file or directory, open './test/data/05-versions-space.pdf'
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./src/lib/rag/luxury-rag-service.ts:8:67)
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./src/lib/agent/tools/search_luxury_knowledge.ts:5:81)
    at __webpack_require__ (.next/server/webpack-runtime.js:33:43)
    at async ServiceExecutor.executeTool (src/lib/agent/core/executor.ts:536:44)
    at async ServiceExecutor.executeService (src/lib/agent/core/executor.ts:186:23)
    at async AsteriaAgentLoop.processRequest (src/lib/agent/core/agent_loop.ts:98:30)
    at async POST (src/app/api/chat/route.ts:315:24)
  534 |         case 'search_luxury_knowledge':
  535 |           console.log(`⚙️ [TOOL ${stepId}] Calling search_luxury_knowledge...`);
> 536 |           const { searchLuxuryKnowledge } = await import('../tools/search_luxury_knowledge');
      |                                            ^
  537 |           result = await searchLuxuryKnowledge(parameters);
  538 |           console.log(`⚙️ [TOOL ${stepId}] search_luxury_knowledge returned:`, {
  539 |             success: result?.success || false, {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: './test/data/05-versions-space.pdf'
}
❌ [TOOL exec_1749430464418_6gcpl] Tool: search_luxury_knowledge, Error: ENOENT: no such file or directory, open './test/data/05-versions-space.pdf'
⚙️ [TOOL exec_1749430464418_6gcpl] Executing: fetch_active_services
⚙️ [TOOL exec_1749430464418_6gcpl] Parameters: { bucket: 'events', tier: 'better' }
⚙️ [TOOL 2tl30u] =================================
⚙️ [TOOL 2tl30u] Executing: fetch_active_services
⚙️ [TOOL 2tl30u] Parameters: { bucket: 'events', tier: 'better' }
⚙️ [TOOL 2tl30u] Calling fetch_active_services...
⚙️ [TOOL 2tl30u] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL 2tl30u] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430464418_6gcpl] Step completed in 0ms
✅ [TOOL exec_1749430464418_6gcpl] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
🏁 [EXECUTOR exec_1749430464418_6gcpl] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 1,
  stepsFailed: 1,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test-member-fifty-k
[REFLECTOR] Performance Update: {
  outcome: 'partial_success',
  responseTime: 244,
  toolsUsed: [ 'search_luxury_knowledge', 'fetch_active_services' ],
  intentAccuracy: 1,
  executionEfficiency: 0.5
}
[REFLECTOR] Interaction logged with outcome: partial_success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for events request
[GOAL_CHECKER] Goals NOT ACHIEVED (score: 42.6%)
[AGENT_LOOP] Retry recommended - attempting retry 1
[AGENT_LOOP] Implementing retry strategy: escalate
[AGENT_LOOP] Starting request processing for member: Test Fifty-K Member
[AGENT_LOOP] Message: Perfect, please go ahead and book it [Retry: Escalating to human concierge]...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "Perfect, please go ahead and book it [Retry: Escalating to human concierge]"
🧠 [PLANNER] Context: history=0, member=fifty-k
🧠 [PLANNER] Extracted entities: { dates: [], locations: [], people: [], preferences: [] }
🧠 [PLANNER] Bucket scores: {
  transportation: 0,
  events: 0.3571722504071465,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 1
}
🧠 [PLANNER] Urgency: standard
🧠 [PLANNER] Suggested tier: better
🧠 [PLANNER] Sorted buckets: [
  [ 'lifestyle', 1 ],
  [ 'events', 0.3571722504071465 ],
  [ 'transportation', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ]
]
🧠 [PLANNER] Primary bucket: lifestyle
🧠 [PLANNER] Secondary buckets: [ 'events' ]
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: general
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'lifestyle',
  secondaryBuckets: [ 'events' ],
  serviceType: 'general',
  urgency: 'standard',
  confidence: 1,
  extractedEntities: { dates: [], locations: [], people: [], preferences: [] },
  suggestedTier: 'better'
}
[AGENT_LOOP] Intent: lifestyle (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430464665_wsrnk] Starting execution for bucket: lifestyle
🔧 [EXECUTOR exec_1749430464665_wsrnk] Context: {
  bucket: 'lifestyle',
  confidence: 1,
  urgency: 'standard',
  memberTier: 'fifty-k',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: lifestyle, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for lifestyle (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: general, Urgency: standard
🔍 [WORKFLOW_BRIDGE] Extracted entities: { dates: [], locations: [], people: [], preferences: [] }
[WORKFLOW_BRIDGE] Member tier fifty-k insufficient for booking workflow
⚙️ [TOOL exec_1749430464665_wsrnk] Executing: fetch_active_services
⚙️ [TOOL exec_1749430464665_wsrnk] Parameters: { bucket: 'lifestyle', tier: 'better', searchTerm: 'general' }
⚙️ [TOOL qvv81h] =================================
⚙️ [TOOL qvv81h] Executing: fetch_active_services
⚙️ [TOOL qvv81h] Parameters: { bucket: 'lifestyle', tier: 'better', searchTerm: 'general' }
⚙️ [TOOL qvv81h] Calling fetch_active_services...
⚙️ [TOOL qvv81h] fetch_active_services returned: {
  servicesCount: 0,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL qvv81h] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430464665_wsrnk] Step completed in 0ms
✅ [TOOL exec_1749430464665_wsrnk] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430464665_wsrnk] Executing: create_ticket
⚙️ [TOOL exec_1749430464665_wsrnk] Parameters: {
  serviceId: 'to_be_determined',
  requirements: {},
  priority: 'standard'
}
⚙️ [TOOL hhlxoo] =================================
⚙️ [TOOL hhlxoo] Executing: create_ticket
⚙️ [TOOL hhlxoo] Parameters: {
  serviceId: 'to_be_determined',
  requirements: {},
  priority: 'standard'
}
⚙️ [TOOL hhlxoo] Calling create_ticket...
⚙️ [TOOL hhlxoo] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL hhlxoo] create_ticket returned: {
  ticketId: 'TAG-MBODQ9P5',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL hhlxoo] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430464665_wsrnk] Step completed in 0ms
✅ [TOOL exec_1749430464665_wsrnk] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430464665_wsrnk] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test-member-fifty-k
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 2,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for lifestyle request
[GOAL_CHECKER] Goals NOT ACHIEVED (score: 44.5%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: lifestyle, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: false, Score: 0.44545454545454544
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for lifestyle...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'lifestyle',
  serviceType: 'general',
  confidence: 1,
  goalAchieved: false,
  goalScore: 0.44545454545454544,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: lifestyle, type: general
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 363,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you're seeking personal s..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you're seeking personal s..."
[AGENT_LOOP] Complete in 3ms - Goals NOT ACHIEVED
🚨 DIAGNOSTIC [ynm59k] Agent loop returned: {
  success: false,
  responseLength: 714,
  intentAnalysis: 'lifestyle',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [ynm59k]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [ynm59k]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [ynm59k]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 0,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 0,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 251.26533299998846ms
   ├─ Phase: execution
   ├─ Confidence: 0.44545454545454544
   ├─ Intent: lifestyle_services
   └─ Actions: 4
🔍 [API ynm59k] Analyzing message for booking confirmation...
🎯 [API ynm59k] Booking confirmation detected for lifestyle_services
🔔 [CONCIERGE] Processing service_request notification for SR-464667
✅ Retrieved secret from GCP: SLACK_WEBHOOK_URL
✅ [CONCIERGE] Service request notification sent for SR-464667
✅ [API ynm59k] Service ticket SR-464667 created and concierge notified
🎫 [API ynm59k] Ticket creation check: {
  agentSuccess: false,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API ynm59k] Skipping ticket creation: {
  agentSuccess: false,
  hasCreateTicketAction: true,
  reason: 'Agent failed'
}
📤 [API ynm59k] Final response analysis: {
  messageLength: 877,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: false,
  toolsUsed: 4,
  confidence: 0.44545454545454544,
  processingTime: 510,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API ynm59k] Sending to frontend - response field: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you'r..."
 POST /api/chat 200 in 523ms

🚨 DIAGNOSTIC [3hv3pq] ================================
🚨 CHAT API CALLED: 2025-06-09T00:54:24.931Z
🚨 Request URL: http://localhost:3000/api/chat
🚨 Request Method: POST
🚨 DIAGNOSTIC [3hv3pq] Request Body:
   ├─ Message: "I need personal shopping assistance for this weekend"
   ├─ Session ID: firebase-test-1749430464927
   ├─ History Length: 0
   └─ Full Body Keys: message, sessionId, memberProfile
👤 Guest user: Test Corporate Member
🚨 DIAGNOSTIC [3hv3pq] STARTING AGENT PROCESSING
🤖 AUTONOMOUS AGENT: Processing "I need personal shopping assistance for this weeke..."
🚨 DIAGNOSTIC [3hv3pq] Initializing AsteriaAgentLoop...
🚀 Workflow Engine initialized with config: {
  maxConcurrentWorkflows: 10,
  maxConcurrentStepsPerWorkflow: 3,
  defaultStepTimeout: 30000,
  defaultRetryConfig: { maxRetries: 3, retryDelay: 1000, exponentialBackoff: true },
  approvalTimeout: 86400000,
  metricsRetentionDays: 30,
  enableParallelExecution: true,
  enableAutoRetry: true
}
🚀 [EXECUTOR] Initializing premium service workflows...
   ├─ ElevenLabs voice synthesis integration: ✅ ACTIVE
   ├─ Amadeus travel API integration: ✅ ACTIVE
   ├─ Stripe payment processing workflows: ✅ READY
   ├─ Google Calendar booking workflows: ✅ READY
   ├─ Global workflow engine: ✅ OPERATIONAL
   └─ Workflow bridge status: ✅ OPERATIONAL
🎯 [EXECUTOR] All premium service workflows activated and ready
🚨 DIAGNOSTIC [3hv3pq] Agent loop created successfully
🚨 DIAGNOSTIC [3hv3pq] Creating direct agent context...
🚨 DIAGNOSTIC [3hv3pq] Direct context created: {
  memberId: 'test-member-corporate',
  memberName: 'Test Corporate Member',
  memberTier: 'corporate',
  messageLength: 52,
  actualMessage: 'I need personal shopping assistance for this weeke...'
}
🚀 Agent Loop: Starting autonomous processing...
🚨 DIAGNOSTIC [3hv3pq] Calling agentLoop.processRequest()...
🔍 DIAGNOSTIC [3hv3pq] Input Context: { messageLength: 52, memberTier: 'corporate', hasHistory: false }
[AGENT_LOOP] Starting request processing for member: Test Corporate Member
[AGENT_LOOP] Message: I need personal shopping assistance for this weekend...
[AGENT_LOOP] Phase 1: Intent Planning
🧠 [PLANNER] DIAGNOSTIC: Analyzing message: "I need personal shopping assistance for this weekend"
🧠 [PLANNER] Context: history=0, member=corporate
🧠 [PLANNER] Extracted entities: {
  dates: [],
  locations: [],
  people: [],
  preferences: [ 'personal shopping assistance for this weekend' ]
}
🧠 [PLANNER] Bucket scores: {
  transportation: 0,
  events: 0,
  brandDev: 0,
  investments: 0,
  taglades: 0,
  lifestyle: 1
}
🧠 [PLANNER] Urgency: urgent
🧠 [PLANNER] Suggested tier: better
🧠 [PLANNER] Sorted buckets: [
  [ 'lifestyle', 1 ],
  [ 'transportation', 0 ],
  [ 'events', 0 ],
  [ 'brandDev', 0 ],
  [ 'investments', 0 ],
  [ 'taglades', 0 ]
]
🧠 [PLANNER] Primary bucket: lifestyle
🧠 [PLANNER] Secondary buckets: []
🧠 [PLANNER] Confidence: 1
🧠 [PLANNER] Service type: personal shopping
🧠 [PLANNER] FINAL RESULT: {
  primaryBucket: 'lifestyle',
  secondaryBuckets: [],
  serviceType: 'personal shopping',
  urgency: 'urgent',
  confidence: 1,
  extractedEntities: {
    dates: [],
    locations: [],
    people: [],
    preferences: [ 'personal shopping assistance for this weekend' ]
  },
  suggestedTier: 'better'
}
[AGENT_LOOP] Intent: lifestyle (confidence: 100.0%)
[AGENT_LOOP] Phase 2: Service Execution
🔧 [EXECUTOR exec_1749430464932_4e73a] Starting execution for bucket: lifestyle
🔧 [EXECUTOR exec_1749430464932_4e73a] Context: {
  bucket: 'lifestyle',
  confidence: 1,
  urgency: 'urgent',
  memberTier: 'corporate',
  hasMessage: true
}
[EXECUTOR] Analyzing for workflow triggers...
[WORKFLOW_BRIDGE] Analyzing agent result for workflow triggers
[WORKFLOW_BRIDGE] Intent: lifestyle, Confidence: 1
🔍 [WORKFLOW_BRIDGE] Phase 6.3: Analyzing workflow triggers for lifestyle (confidence: 1)
🔍 [WORKFLOW_BRIDGE] Service type: personal shopping, Urgency: urgent
🔍 [WORKFLOW_BRIDGE] Extracted entities: {
  dates: [],
  locations: [],
  people: [],
  preferences: [ 'personal shopping assistance for this weekend' ]
}
[WORKFLOW_BRIDGE] Member tier corporate insufficient for booking workflow
⚙️ [TOOL exec_1749430464932_4e73a] Executing: fetch_active_services
⚙️ [TOOL exec_1749430464932_4e73a] Parameters: {
  bucket: 'lifestyle',
  tier: 'better',
  searchTerm: 'personal shopping'
}
⚙️ [TOOL ner8bt] =================================
⚙️ [TOOL ner8bt] Executing: fetch_active_services
⚙️ [TOOL ner8bt] Parameters: {
  bucket: 'lifestyle',
  tier: 'better',
  searchTerm: 'personal shopping'
}
⚙️ [TOOL ner8bt] Calling fetch_active_services...
⚙️ [TOOL ner8bt] fetch_active_services returned: {
  servicesCount: 1,
  hasServices: true,
  resultType: 'object',
  keys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
✅ [TOOL ner8bt] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430464932_4e73a] Step completed in 0ms
✅ [TOOL exec_1749430464932_4e73a] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'services', 'bucketCounts', 'totalFound', 'searchSummary' ]
}
⚙️ [TOOL exec_1749430464932_4e73a] Executing: create_ticket
⚙️ [TOOL exec_1749430464932_4e73a] Parameters: { serviceId: 'to_be_determined', requirements: {}, priority: 'urgent' }
⚙️ [TOOL kue72b] =================================
⚙️ [TOOL kue72b] Executing: create_ticket
⚙️ [TOOL kue72b] Parameters: { serviceId: 'to_be_determined', requirements: {}, priority: 'urgent' }
⚙️ [TOOL kue72b] Calling create_ticket...
⚙️ [TOOL kue72b] Using fallback serviceId: luxury-ground-transport
⚙️ [TOOL kue72b] create_ticket returned: {
  ticketId: 'TAG-MBODQ9WK',
  hasTicket: true,
  ticketType: 'object',
  keys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
✅ [TOOL kue72b] Tool execution completed: {
  success: true,
  resultLength: 'N/A',
  resultPreview: 'Object/Array result',
  hasData: true
}
✅ [TOOL exec_1749430464932_4e73a] Step completed in 1ms
✅ [TOOL exec_1749430464932_4e73a] Result preview: {
  hasResult: true,
  resultType: 'object',
  resultKeys: [ 'ticket', 'confirmationCode', 'nextSteps', 'estimatedResponse' ]
}
🏁 [EXECUTOR exec_1749430464932_4e73a] Execution complete: {
  success: true,
  stepsExecuted: 2,
  stepsCompleted: 2,
  stepsFailed: 0,
  workflowTriggered: false,
  hasFinalResult: true,
  escalationNeeded: false
}
[AGENT_LOOP] Execution: SUCCESS
[AGENT_LOOP] Phase 3: Interaction Reflection
[REFLECTOR] Analyzing interaction for member: test-member-corporate
[REFLECTOR] Performance Update: {
  outcome: 'success',
  responseTime: 2,
  toolsUsed: [ 'fetch_active_services', 'create_ticket' ],
  intentAccuracy: 1,
  executionEfficiency: 1
}
[REFLECTOR] Interaction logged with outcome: success
[AGENT_LOOP] Phase 4: Goal Validation
[GOAL_CHECKER] Validating goals for lifestyle request
[GOAL_CHECKER] Goals ACHIEVED (score: 80.9%)
🤖 [RESPONSE_GEN] DIAGNOSTIC - Response Generation:
🤖 [RESPONSE_GEN] Intent: lifestyle, Confidence: 1
🤖 [RESPONSE_GEN] Goals achieved: true, Score: 0.8090909090909091
🤖 [RESPONSE_GEN] Execution success: true
🤖 [RESPONSE_GEN] Generating personalized response for lifestyle...
📝 [RESPONSE_GEN] =================================
📝 [RESPONSE_GEN] Generating personalized response: {
  primaryBucket: 'lifestyle',
  serviceType: 'personal shopping',
  confidence: 1,
  goalAchieved: true,
  goalScore: 0.8090909090909091,
  executionSuccess: true,
  toolsExecuted: 2,
  completedTools: 2,
  hasFinalResult: true
}
📝 [RESPONSE_GEN] Tool execution summary for response: {
  hasServices: true,
  hasTicket: true,
  hasNotification: false,
  shouldIncludeToolResults: true
}
🤖 [RESPONSE_GEN] Generating for bucket: lifestyle, type: personal shopping
✅ [RESPONSE_GEN] Integrating tool results into response...
📝 [RESPONSE_GEN] Final response analysis: {
  responseLength: 363,
  isTemplate: false,
  hasToolIndicators: true,
  responsePreview: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you're seeking personal s..."
}
🤖 [RESPONSE_GEN] FINAL RESPONSE: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you're seeking personal s..."
[AGENT_LOOP] Complete in 3ms - Goals ACHIEVED
🚨 DIAGNOSTIC [3hv3pq] Agent loop returned: {
  success: true,
  responseLength: 763,
  intentAnalysis: 'lifestyle',
  executionResult: true
}
🔧 EXECUTION DIAGNOSTIC [3hv3pq]: {
  hasExecutionResult: true,
  executionSuccess: true,
  executedStepsCount: 2,
  completedSteps: 2,
  escalationNeeded: false,
  workflowTriggered: false,
  workflowId: undefined,
  workflowType: undefined,
  hasFinalResult: true
}
💬 RESPONSE ANALYSIS [3hv3pq]: {
  isGenericTemplate: false,
  hasTicketReference: true,
  hasServiceCount: false,
  responseType: 'DYNAMIC',
  likelyToolExecution: true
}
⚙️ TOOL EXECUTION [3hv3pq]: {
  stepsExecuted: [
    {
      tool: 'fetch_active_services',
      status: 'completed',
      duration: 0,
      hasResult: true
    },
    {
      tool: 'create_ticket',
      status: 'completed',
      duration: 1,
      hasResult: true
    }
  ]
}
🎯 Agent Loop COMPLETE:
   ├─ Time: 3.169792000000598ms
   ├─ Phase: execution
   ├─ Confidence: 0.8090909090909091
   ├─ Intent: lifestyle_services
   └─ Actions: 4
🔍 [API 3hv3pq] Analyzing message for booking confirmation...
🎫 [API 3hv3pq] Ticket creation check: {
  agentSuccess: true,
  hasCreateTicketAction: true,
  nextActionsCount: 4,
  nextActionsTypes: [
    'create_ticket',
    'send_notification',
    'collect_info',
    'create_ticket'
  ]
}
🎫 [API 3hv3pq] Creating service ticket with Firebase storage...
🎫 [API 3hv3pq] Parameters: {
  message: 'I need personal shopping assistance for this weeke...',
  memberId: 'test-member-corporate',
  memberTier: 'corporate',
  useFirebase: true
}
🔥 [FIREBASE] Storing ticket SR-63694934 to Firestore...
✅ [FIREBASE] Ticket SR-63694934 stored successfully with doc ID: EQc2CLSi32o5CwiB5wU7
🎫 [API 3hv3pq] Ticket created with Firebase storage: SR-63694934
🔥 [API 3hv3pq] Firebase document ID: EQc2CLSi32o5CwiB5wU7
🔔 Processing Slack notification for ticket SR-63694934
📤 Sending Slack notification for LOW priority ticket SR-63694934
✅ Slack notification sent successfully for ticket SR-63694934
❌ Failed to send SMS notification: Error: 'From' +17027689728 is not a Twilio phone number or Short Code country mismatch
    at async sendSMSNotification (src/lib/notifications/sms.js:22:4)
    at async POST (src/app/api/chat/route.ts:521:8)
  20 |   
  21 |   try {
> 22 |     await twilio.messages.create({
     |    ^
  23 |       body: message,
  24 |       from: process.env.TWILIO_PHONE_NUMBER,
  25 |       to: process.env.CONCIERGE_PHONE_NUMBER {
  status: 400,
  code: 21659,
  moreInfo: 'https://www.twilio.com/docs/errors/21659',
  details: undefined
}
🎫 [API 3hv3pq] Service ticket created: SR-63694934 for Test Corporate Member (tier: corporate)
📤 [API 3hv3pq] Final response analysis: {
  messageLength: 763,
  isTemplate: false,
  hasToolResults: true,
  agentSuccess: true,
  toolsUsed: 4,
  confidence: 0.8090909090909091,
  processingTime: 713,
  autonomous: true,
  journeyPhase: 'execution',
  workflowTriggered: undefined
}
📤 [API 3hv3pq] Sending to frontend - response field: "I'd be delighted to curate a bespoke lifestyle experience for you. Whether you'r..."
 POST /api/chat 200 in 717ms
