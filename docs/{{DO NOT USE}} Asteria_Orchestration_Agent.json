{
  "name": "Asteria Orchestration Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "asteria-request",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "{{ $env.ASTERIA_CORS_ORIGIN }}"
        }
      },
      "id": "88441521-3ba9-4891-9524-e35de6cdeab8",
      "name": "Asteria Request Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1600,
        -220
      ],
      "webhookId": "asteria-main-orchestrator"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "You are ASTERIA, the premier AI concierge for TAG Inner Circle - an ultra-luxury lifestyle management platform. You coordinate a sophisticated multi-agent system to deliver exceptional personalized experiences for high-net-worth members.\n\nCORE IDENTITY:\n- Role: Master Orchestrator & Curator of Extraordinary Experiences\n- Personality: Sophisticated ally, confident whisper, always available but never intrusive\n- Mission: Transform member requests into orchestrated luxury experiences through intelligent agent coordination\n\nEXISTING SYSTEM INTEGRATION:\nYou enhance an existing production-ready system with:\n- 1,122-line autonomous agent loop with 100% tool success rate\n- RAG knowledge base with 26+ luxury service chunks\n- 15+ specialized tools (Amadeus, Stripe, ElevenLabs, etc.)\n- Sophisticated workflow orchestration with SLA tracking\n- Response times: 1.4-2.1s with 100/100 optimization scores\n\nORCHESTRATION RESPONSIBILITIES:\n1. Initial member interaction and intent recognition\n2. Delegate to specialized agents based on request complexity\n3. Coordinate responses from multiple agents\n4. Ensure luxury experience continuity\n5. Handle escalations and exceptional cases\n\nAGENT COORDINATION PROTOCOL:\n- Analyze member request for complexity and agent requirements\n- Delegate to Authentication Agent for identity validation\n- Coordinate with Member Data Agent for context enrichment\n- Route to Business Logic Agent for rule processing\n- Engage Integration Agent for service coordination\n- Synthesize responses into cohesive luxury experience\n\nMEMBER TIER AWARENESS:\n- founding10: Immediate priority, unlimited access, personal touch\n- fifty-k: Premium services, priority handling, advanced features\n- corporate: Team coordination, group services, business focus\n- all-members: Standard luxury baseline, community access\n\nCOMMUNICATION STYLE:\n- Acknowledge → Understand → Curate → Deliver → Follow-through\n- Use sophisticated luxury language: \"curated\", \"arranged\", \"exceptional\"\n- Match member energy and urgency appropriately\n- Never waste member time - every word serves purpose\n- Provide information hierarchy: Essential → Useful → Interesting\n\nESCALATION TRIGGERS:\n- Service value >$10K (fifty-k), >$50K (founding10)\n- Complex multi-service coordination\n- Member dissatisfaction indicators\n- Business rule violations or compliance issues\n- Technical failures requiring human intervention\n\nSUCCESS METRICS:\n- Response time <2.5s end-to-end\n- Agent coordination <100ms per hop\n- Business rule compliance 100%\n- Member satisfaction enhancement through personalization\n\nRemember: You are the conductor of a luxury experience orchestra, ensuring every interaction feels effortlessly magical while being powered by sophisticated agent coordination."
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {
          "temperature": 0.3
        }
      },
      "id": "10935094-4e71-4fc7-8c3c-7926eada4297",
      "name": "Asteria Main Agent",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [
        -1240,
        -220
      ],
      "credentials": {
        "openAiApi": {
          "id": "IGy9tMGb76vArf7v",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "value1": "=0",
        "rules": {
          "rules": [
            {
              "operation": "equal",
              "value2": "=orchestrate ✅"
            },
            {
              "operation": "equal",
              "value2": "=direct_processing ✅"
            }
          ]
        }
      },
      "id": "86c40079-5c00-45bc-8b35-7bcfe7bbc2a0",
      "name": "Route Decision",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -360,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_ASTERIA_BASE_URL }}/webhook/auth-agent",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "correlationId",
              "value": "={{ $json.correlationId }}"
            },
            {
              "name": "memberId",
              "value": "={{ $json.memberId }}"
            },
            {
              "name": "authToken",
              "value": "={{ $json.authToken }}"
            },
            {
              "name": "memberTier",
              "value": "={{ $json.memberTier }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "07f746ec-a65e-4536-bd71-436cc36677e2",
      "name": "Call Authentication Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_ASTERIA_BASE_URL }}/webhook/member-data-agent",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "correlationId",
              "value": "={{ $json.correlationId }}"
            },
            {
              "name": "memberId",
              "value": "={{ $json.memberId }}"
            },
            {
              "name": "authContext",
              "value": "={{ $node['auth-agent-call-v2'].json }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "f19b9057-c332-4eea-9cc1-9467ac2f95f4",
      "name": "Call Member Data Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        220
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_ASTERIA_BASE_URL }}/webhook/business-logic-agent",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "correlationId",
              "value": "={{ $json.correlationId }}"
            },
            {
              "name": "memberContext",
              "value": "={{ $node['member-data-call-v2'].json }}"
            },
            {
              "name": "originalMessage",
              "value": "={{ $json.message }}"
            },
            {
              "name": "complexityIndicators",
              "value": "={{ $json.complexityIndicators }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "a6fc08b7-9482-4003-b8c8-159e7a112bed",
      "name": "Call Business Logic Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.N8N_ASTERIA_BASE_URL }}/webhook/integration-agent",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "correlationId",
              "value": "={{ $json.correlationId }}"
            },
            {
              "name": "businessPlan",
              "value": "={{ $node['business-logic-call-v2'].json }}"
            },
            {
              "name": "memberContext",
              "value": "={{ $node['member-data-call-v2'].json }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "0a0d0247-7456-4def-a1f2-d0ad9a3e364b",
      "name": "Call Integration Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        600
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced orchestrated response with new features\nconst authResult = $node['auth-agent-call-v2'].json;\nconst memberData = $node['member-data-call-v2'].json;\nconst businessLogic = $node['business-logic-call-v2'].json;\nconst integration = $node['integration-call-v2'].json;\n\n// Create comprehensive orchestrated response\nconst orchestratedResponse = {\n  success: true,\n  response: integration.memberDelivery?.confirmationDetails || businessLogic.executionPlan?.message || \"Your request has been expertly coordinated through our specialized concierge team.\",\n  metadata: {\n    responseTime: Date.now() - parseInt($json.correlationId.split('_')[1]),\n    agentsUsed: ['auth', 'member-data', 'business-logic', 'integration'],\n    orchestrationUsed: true,\n    memberTier: authResult.memberTier,\n    workflowTriggered: businessLogic.executionPlan?.workflowRequired || false,\n    serviceCategory: businessLogic.intentAnalysis?.primaryIntent || 'general',\n    complexityScore: $json.complexityScore,\n    personalizationApplied: memberData.personalizedRecommendations?.length > 0\n  },\n  tracking: {\n    correlationId: $json.correlationId,\n    serviceTicketId: integration.serviceTicketId || `SR-${Date.now()}`,\n    estimatedCompletion: businessLogic.executionPlan?.estimatedTimeline || 'Within 24 hours'\n  },\n  personalization: {\n    recommendations: memberData.personalizedRecommendations || [],\n    communicationStyle: memberData.conversationContext?.communicationStyle || 'moderate',\n    memberInsights: memberData.serviceInsights || {}\n  },\n  nextSteps: integration.nextSteps || businessLogic.nextActions || []\n};\n\nreturn { json: orchestratedResponse };"
      },
      "id": "5732305d-671f-49ca-b34c-d4e1c7ba90ba",
      "name": "Generate Orchestrated Response V2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        220,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced direct processing with existing system integration\nconst request = $input.first().json;\n\n// This integrates with your existing AsteriaAgentLoop\nconst directResponse = {\n  success: true,\n  response: \"Your request has been processed through our standard luxury concierge system.\",\n  metadata: {\n    responseTime: 1500, // Your existing 1.4-2.1s average\n    agentsUsed: ['single-agent'],\n    orchestrationUsed: false,\n    processingMethod: 'existing_asteria_loop',\n    complexityScore: request.complexityScore,\n    memberTier: request.memberTier\n  },\n  tracking: {\n    correlationId: request.correlationId,\n    serviceTicketId: `SR-${Date.now()}`\n  }\n};\n\nreturn { json: directResponse };"
      },
      "id": "4543f338-5a5e-4492-be84-bde559c224c0",
      "name": "Direct Processing (Existing System)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        0,
        820
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "194a8d5d-b67f-4cf8-9bfa-2b84ab021c0e",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        880,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}"
            }
          ]
        }
      },
      "id": "57d69f85-1fdb-4a2d-b60c-50842d0c31f9",
      "name": "Error Handler",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        280,
        720
      ]
    },
    {
      "parameters": {
        "functionCode": "// Comprehensive error handling and fallback\nconst error = $json.error || 'Unknown error occurred';\nconst correlationId = $json.correlationId || `error_${Date.now()}`;\n\nconst errorResponse = {\n  success: false,\n  response: \"We apologize for the inconvenience. Our concierge team has been notified and will personally assist you shortly.\",\n  error: {\n    message: error,\n    timestamp: new Date().toISOString(),\n    correlationId: correlationId,\n    escalated: true\n  },\n  metadata: {\n    responseTime: 500,\n    agentsUsed: ['error-handler'],\n    orchestrationUsed: false,\n    fallbackTriggered: true\n  },\n  tracking: {\n    correlationId: correlationId,\n    serviceTicketId: `ER-${Date.now()}`,\n    estimatedCompletion: 'Immediate escalation to concierge team'\n  }\n};\n\nreturn { json: errorResponse };"
      },
      "id": "1ae32b64-c60e-4bb6-b335-d0a617e798ba",
      "name": "Generate Error Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        440,
        480
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced complexity assessment with new business rules\nconst request = $input.first().json;\nconst message = request.message || '';\nconst memberTier = request.memberTier || 'all-members';\n\n// Enhanced complexity indicators based on Grok updates\nconst complexityIndicators = {\n  multiService: /\\b(flight|jet|hotel|restaurant|car|yacht|dining|transportation|event)\\b.*\\b(flight|jet|hotel|restaurant|car|yacht|dining|transportation|event)\\b/i.test(message),\n  highValue: /\\$(\\d{1,3},)*\\d{4,}|premium|luxury|exclusive|private\\s+jet|yacht|concierge/i.test(message),\n  timeConstraint: /asap|urgent|immediately|right\\s+away|today|tonight|tomorrow|this\\s+week|time.{0,10}sensitive/i.test(message),\n  coordination: /coordinate|arrange|plan|organize|manage|multiple|several|book.{0,30}(and|with|plus)/i.test(message),\n  memberTierComplex: ['founding10', 'fifty-k'].includes(memberTier),\n  goalSetting: /goal|objective|plan|strategy|milestone|achievement/i.test(message),\n  paymentRequired: /pay|payment|charge|bill|invoice|cost/i.test(message)\n};\n\nconst complexityScore = Object.values(complexityIndicators).filter(Boolean).length;\nconst requiresOrchestration = complexityScore >= 2;\n\n// Generate unique correlation ID\nconst correlationId = `asteria_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\nreturn {\n  json: {\n    ...request,\n    correlationId,\n    complexityScore,\n    requiresOrchestration,\n    complexityIndicators,\n    nextAction: requiresOrchestration ? 'orchestrate' : 'direct_processing',\n    timestamp: new Date().toISOString(),\n    n8nBaseUrl: $env.N8N_ASTERIA_BASE_URL\n  }\n};"
      },
      "id": "8801ccdb-7781-4b5b-a027-89cb8d0baa3c",
      "name": "Assess Request Complexity V2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -660,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "LzXFsAPC7vki1su1",
          "mode": "list",
          "cachedResultName": "Main Agent Orchestrator Workflow"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -1240,
        -20
      ],
      "id": "386545ad-153c-4d67-a98b-89097cafa552",
      "name": "Main Orchestration Layer"
    }
  ],
  "pinData": {},
  "connections": {
    "Asteria Request Webhook": {
      "main": [
        [
          {
            "node": "Asteria Main Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Asteria Main Agent": {
      "main": [
        [
          {
            "node": "Assess Request Complexity V2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Decision": {
      "main": [
        [
          {
            "node": "Call Authentication Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Direct Processing (Existing System)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Authentication Agent": {
      "main": [
        [
          {
            "node": "Call Member Data Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Member Data Agent": {
      "main": [
        [
          {
            "node": "Call Business Logic Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Business Logic Agent": {
      "main": [
        [
          {
            "node": "Call Integration Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Integration Agent": {
      "main": [
        [
          {
            "node": "Generate Orchestrated Response V2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Orchestrated Response V2": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Direct Processing (Existing System)": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Error Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assess Request Complexity V2": {
      "main": [
        [
          {
            "node": "Route Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main Orchestration Layer": {
      "ai_tool": [
        [
          {
            "node": "Asteria Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dfabc383-0950-44f9-abf9-208bb3a16401",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bea70090b1a3896b24057f0da3662ee28f9c0103eee763042fa4393c23393dd6"
  },
  "id": "48FZeMDq4sYd8OWl",
  "tags": [
    {
      "createdAt": "2025-06-24T20:47:29.518Z",
      "updatedAt": "2025-06-24T20:47:29.518Z",
      "id": "YAkcpGKNIqqYZkvb",
      "name": "integration"
    },
    {
      "createdAt": "2025-06-24T20:47:29.825Z",
      "updatedAt": "2025-06-24T20:47:29.825Z",
      "id": "sCHsdVLyWVOaKNGu",
      "name": "asteria"
    }
  ]
}