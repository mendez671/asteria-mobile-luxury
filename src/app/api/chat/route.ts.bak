import { OpenAI } from 'openai';
import { NextRequest, NextResponse } from 'next/server';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Asteria's luxury voice and personality
const ASTERIA_SYSTEM_PROMPT = `You are Asteria, a sophisticated AI concierge for TAG's elite $50k members. Your mission is to provide exceptional, personalized service with elegance and warmth.

LUXURY COMMUNICATION PRINCIPLES:
- Never ask about budget - assume unlimited resources and premium preferences
- Focus on extraordinary experiences and exclusive access
- Anticipate needs rather than just respond to requests
- Offer curated options rather than overwhelming choices
- Maintain mystique while being informative

BRAND VOICE & PHRASES:
- "It would be my absolute pleasure to arrange..."
- "I'll ensure this exceeds your expectations..."
- "Consider this expertly handled..."
- "Allow me to curate something extraordinary..."
- "We have exclusive access to..."
- "Your experience will be nothing short of magnificent..."

COMMUNICATION TOOLS & PATTERNS:

1. ASSUMPTION TECHNIQUE: Instead of asking, assume premium level
   ‚ùå "What's your budget?"
   ‚úÖ "I'll arrange our finest options for you..."

2. ELEVATION LANGUAGE: Transform basic requests into luxury experiences
   ‚ùå "dinner reservation" ‚Üí ‚úÖ "culinary journey"
   ‚ùå "hotel room" ‚Üí ‚úÖ "exclusive sanctuary"
   ‚ùå "transportation" ‚Üí ‚úÖ "seamless passage"

3. EXCLUSIVE ACCESS POSITIONING:
   - "Through our private connections..."
   - "Our exclusive partnerships enable..."
   - "I have access to arrangements typically unavailable..."

4. PROACTIVE ENHANCEMENT:
   - Suggest complementary services without being asked
   - Anticipate seasonal considerations
   - Offer insider knowledge and experiences

SERVICE CATEGORIES:
- Private aviation & transportation (usually HIGH urgency)
- Luxury accommodations & exclusive travel (MEDIUM urgency)
- Fine dining & culinary experiences (MEDIUM urgency)
- Entertainment & exclusive events (HIGH urgency)
- Personal services & lifestyle curation (LOW urgency)
- Business & professional services (MEDIUM urgency)

ESSENTIAL DETAILS TO GATHER (Never ask about budget):
- Precise timing and dates
- Number of guests/participants  
- Location preferences or routes
- Experience level desired (intimate, grand, private, etc.)
- Special occasions or preferences
- Any accessibility or dietary considerations

BOOKING TRIGGER PHRASES:
- "Let's proceed"
- "Please arrange this"
- "Book it"
- "Make it happen"
- "I'd like to move forward"
- "Yes, let's do this"

CRITICAL: Set "readyForTicket": true when:
- Member confirms they want to proceed with clear language
- Sufficient details provided for premium execution
- Member expresses urgency or time sensitivity
- Natural conversation conclusion reached

RESPONSE FORMAT:
{
  "response": "Your elegant, anticipatory response",
  "serviceCategory": "Category name",
  "extractedDetails": {
    "dates": "Specific dates or 'not specified'",
    "guests": "Number or 'not specified'", 
    "location": "Location or 'not specified'",
    "experienceLevel": "Premium assumptions or preferences",
    "specialRequests": "Occasions, preferences, requirements"
  },
  "urgency": "high|medium|low",
  "readyForTicket": true/false
}`;

interface TicketData {
  memberID: string;
  message: string;
  serviceCategory: string;
  extractedDetails: {
    dates?: string;
    guests?: string;
    location?: string;
    experienceLevel?: string;
    specialRequests?: string;
  };
  urgency: string;
}

export async function POST(request: NextRequest) {
  try {
    const { message, memberID } = await request.json();

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    // Process with OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: ASTERIA_SYSTEM_PROMPT },
        { role: "user", content: message }
      ],
      temperature: 0.7,
      max_tokens: 1000,
    });

    const rawResponse = completion.choices[0]?.message?.content;
    
    if (!rawResponse) {
      throw new Error('No response from OpenAI');
    }

    let asteriaResponse;
    try {
      asteriaResponse = JSON.parse(rawResponse);
    } catch {
      // Fallback if JSON parsing fails
      asteriaResponse = {
        response: "It would be my absolute pleasure to assist you with this request. Allow me to curate something extraordinary that matches your exceptional taste.",
        serviceCategory: "General Inquiry",
        extractedDetails: {
          experienceLevel: "Premium luxury preferences assumed",
          specialRequests: "Personalized service required"
        },
        urgency: "medium",
        readyForTicket: false
      };
    }

    // If ready for ticket, send notifications
    if (asteriaResponse.readyForTicket) {
      await sendConciergeNotification({
        memberID,
        message,
        serviceCategory: asteriaResponse.serviceCategory,
        extractedDetails: asteriaResponse.extractedDetails,
        urgency: asteriaResponse.urgency
      });
    }

    return NextResponse.json(asteriaResponse);

  } catch (error) {
    console.error('Chat API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

async function sendConciergeNotification(ticketData: TicketData) {
  const { memberID, serviceCategory, extractedDetails, urgency } = ticketData;
  
  const serviceRequestId = `SR-${Date.now().toString().slice(-4)}`;
  
  const notificationMessage = `üåü New Service Request ${serviceRequestId}
Member: ${memberID}
Service: ${serviceCategory}
Urgency: ${urgency.toUpperCase()}

Details:
‚Ä¢ Dates: ${extractedDetails.dates || 'Not specified'}
‚Ä¢ Guests: ${extractedDetails.guests || 'Not specified'}
‚Ä¢ Location: ${extractedDetails.location || 'Not specified'}
‚Ä¢ Experience Level: ${extractedDetails.experienceLevel || 'Not specified'}
‚Ä¢ Special Requests: ${extractedDetails.specialRequests || 'None'}

Please review and assign to appropriate concierge team member.`;

  // Send Slack notification for ALL service requests
  if (process.env.SLACK_WEBHOOK_URL) {
    try {
      const response = await fetch(process.env.SLACK_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: notificationMessage,
          channel: '#concierge-requests',
          username: 'Asteria',
          icon_emoji: ':star:'
        })
      });
      
      console.log('Slack notification sent:', response.ok ? 'SUCCESS' : 'FAILED');
    } catch (error) {
      console.error('Slack notification failed:', error);
    }
  }

  // Send SMS notification for HIGH urgency requests only
  if (process.env.TWILIO_ACCOUNT_SID && urgency === 'high') {
    console.log('üö® HIGH URGENCY - Attempting SMS notification...');
    console.log('SMS Config:', {
      hasTwilioSid: !!process.env.TWILIO_ACCOUNT_SID,
      hasAuthToken: !!process.env.TWILIO_AUTH_TOKEN,
      fromNumber: process.env.TWILIO_PHONE_NUMBER,
      toNumber: process.env.CONCIERGE_PHONE_NUMBER,
      urgency: urgency
    });
    
    try {
      const accountSid = process.env.TWILIO_ACCOUNT_SID;
      const authToken = process.env.TWILIO_AUTH_TOKEN;
      const fromNumber = process.env.TWILIO_PHONE_NUMBER;
      const toNumber = process.env.CONCIERGE_PHONE_NUMBER;

      if (!fromNumber || !toNumber) {
        console.error('‚ùå SMS FAILED: Missing phone numbers', { fromNumber, toNumber });
        return;
      }

      console.log('üì± Sending SMS...', { from: fromNumber, to: toNumber });

      const smsResponse = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${Buffer.from(`${accountSid}:${authToken}`).toString('base64')}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          MessagingServiceSid: "MGf791b85b7f5302b703a946030ca0831e",
          To: toNumber,
          Body: `URGENT: ${notificationMessage.substring(0, 160)}...`
        })
      });
      
      if (smsResponse.ok) {
        const responseData = await smsResponse.json();
        console.log('‚úÖ SMS SUCCESS:', responseData.sid);
      } else {
        const errorData = await smsResponse.text();
        console.error('‚ùå SMS FAILED:', smsResponse.status, errorData);
      }
    } catch (error) {
      console.error('‚ùå SMS ERROR:', error);
    }
  } else {
    console.log('üìµ SMS NOT SENT:', {
      reason: !process.env.TWILIO_ACCOUNT_SID ? 'No Twilio SID' : 'Not high urgency',
      urgency: urgency,
      hasTwilioSid: !!process.env.TWILIO_ACCOUNT_SID
    });
  }
} 